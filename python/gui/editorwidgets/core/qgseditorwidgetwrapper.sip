/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/editorwidgets/core/qgseditorwidgetwrapper.h                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsEditorWidgetWrapper : QgsWidgetWrapper
{
%Docstring
 Manages an editor widget
 Widget and wrapper share the same parent

 A wrapper controls one attribute editor widget and is able to create a default
 widget or use a pre-existent widget. It is able to set the widget to the value implied
 by a field of a vector layer, or return the value it currently holds. Every time it is changed
 it has to emit a valueChanged signal. If it fails to do so, there is no guarantee that the
 changed status of the widget will be saved.
%End

%TypeHeaderCode
#include "qgseditorwidgetwrapper.h"
%End
  public:

    enum ConstraintResult
    {
      ConstraintResultPass,
      ConstraintResultFailHard,
      ConstraintResultFailSoft,
    };

    explicit QgsEditorWidgetWrapper( QgsVectorLayer *vl, int fieldIdx, QWidget *editor = 0, QWidget *parent /TransferThis/ = 0 );
%Docstring
 Create a new widget wrapper

 \param vl        The layer on which the field is
 \param fieldIdx  The field which will be controlled
 \param editor    An editor widget. Can be NULL if one should be autogenerated.
 \param parent    A parent widget for this widget wrapper and the created widget.
%End

    virtual QVariant value() const = 0;
%Docstring
 Will be used to access the widget's value. Read the value from the widget and
 return it properly formatted to be saved in the attribute.

 If an invalid variant is returned this will be interpreted as no change.
 Be sure to return a NULL QVariant if it should be set to NULL.

 :return: The current value the widget represents
 :rtype: QVariant
%End

    int fieldIdx() const;
%Docstring
 Access the field index.

 :return: The index of the field you are working on

.. seealso:: layer()
 :rtype: int
%End

    QgsField field() const;
%Docstring
 Access the field.

 :return: The field you are working on

.. seealso:: layer()
 :rtype: QgsField
%End

    QVariant defaultValue() const;
%Docstring
 Access the default value of the field.

 :return: the default value of the field

.. seealso:: layer()
 :rtype: QVariant
%End

    static QgsEditorWidgetWrapper *fromWidget( QWidget *widget );
%Docstring
 Will return a wrapper for a given widget
 \param widget The widget which was created by a wrapper
 :return: The wrapper for the widget or NULL
 :rtype: QgsEditorWidgetWrapper
%End

    static bool isInTable( const QWidget *parent );
%Docstring
 Check if the given widget or one of its parent is a QTableView.
 \param parent the widget to check
 :return: true if yes
 :rtype: bool
%End

    virtual void setEnabled( bool enabled );

%Docstring
 Is used to enable or disable the edit functionality of the managed widget.
 By default this will enable or disable the whole widget

 \param enabled  Enable or Disable?
%End

    virtual void showIndeterminateState();
%Docstring
 Sets the widget to display in an indeterminate "mixed value" state.
.. versionadded:: 2.16
%End

    void updateConstraint( const QgsFeature &featureContext, QgsFieldConstraints::ConstraintOrigin constraintOrigin = QgsFieldConstraints::ConstraintOriginNotSet );
%Docstring
 Update constraint.
 \param featureContext the feature to use to evaluate the constraint
 \param constraintOrigin optional origin for constraints to check. This can be used to limit the constraints tested
 to only provider or layer based constraints.
.. versionadded:: 2.16
%End

    bool isValidConstraint() const;
%Docstring
 Get the current constraint status.
 :return: true if the constraint is valid or if there's no constraint,
 false otherwise
.. versionadded:: 2.16
.. seealso:: constraintFailureReason()
.. seealso:: isBlockingCommit()
 :rtype: bool
%End

    bool isBlockingCommit() const;
%Docstring
 Returns true if the widget is preventing the feature from being committed. This may be true as a result
 of attribute values failing enforced field constraints.
.. versionadded:: 3.0
.. seealso:: isValidConstraint()
 :rtype: bool
%End

    QString constraintFailureReason() const;
%Docstring
 Returns the reason why a constraint check has failed (or an empty string
 if constraint check was successful).
.. seealso:: isValidConstraint()
.. versionadded:: 3.0
 :rtype: str
%End

  signals:

    void valueChanged( const QVariant &value );
%Docstring
 Emit this signal, whenever the value changed.

 \param value The new value
%End

    void constraintStatusChanged( const QString &constraint, const QString &desc, const QString &err, ConstraintResult status );
%Docstring
 Emit this signal when the constraint status changed.
 constraintStatusChanged
 \param constraint represented as a string
 \param desc is the constraint description
 \param err the error represented as a string. Empty if none.
 \param status
%End

  public slots:

    virtual void setFeature( const QgsFeature &feature );
%Docstring
 Will be called when the feature changes

 Is forwarded to the slot setValue()

 \param feature The new feature
%End

    virtual void setValue( const QVariant &value ) = 0;
%Docstring
 Is called, when the value of the widget needs to be changed. Update the widget representation
 to reflect the new value.

 \param value The new value of the attribute
%End

    void valueChanged( const QString &value );
%Docstring
 If you emit to this slot in your implementation, an appropriate change notification
 will be broadcasted. Helper for string type widgets.

 \param value The value
%End

    void valueChanged( int value ) /PyName=valueChangedInt/;
%Docstring
 If you emit to this slot in your implementation, an appropriate change notification
 will be broadcasted. Helper for int type widgets.

 \param value The value
.. note::

   Python name valueChangedInt
%End

    void valueChanged( double value ) /PyName=valueChangedDouble/;
%Docstring
 If you emit to this slot in your implementation, an appropriate change notification
 will be broadcasted. Helper for double type widgets.

 \param value The value
.. note::

   Python name valueChangedDouble
%End

    void valueChanged( bool value ) /PyName=valueChangedBool/;
%Docstring
 If you emit to this slot in your implementation, an appropriate change notification
 will be broadcasted. Helper for bool type widgets.

 \param value The value
.. note::

   Python name valueChangedBool
%End

    void valueChanged( qlonglong value );
%Docstring
 If you emit to this slot in your implementation, an appropriate change notification
 will be broadcasted. Helper for longlong type widgets.

 \param value The value
%End

    void valueChanged();
%Docstring
 Will call the value() method to determine the emitted value
%End

  protected:

    virtual void updateConstraintWidgetStatus( ConstraintResult status );
%Docstring
 This should update the widget with a visual cue if a constraint status
 changed.

 By default a stylesheet will be applied on the widget that changes the
 background color to red.

 This can be overwritten in subclasses to allow individual widgets to
 change the visual cue.

 \param status The current constraint status.

.. versionadded:: 2.16
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/editorwidgets/core/qgseditorwidgetwrapper.h                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
